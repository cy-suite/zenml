"""Add artifact unique constraints [c22561cbb3a9].

Revision ID: c22561cbb3a9
Revises: 1d8f30c54477
Create Date: 2024-10-17 16:41:25.053677

"""

from alembic import op
import sqlalchemy as sa
import sqlmodel

# revision identifiers, used by Alembic.
revision = "c22561cbb3a9"
down_revision = "1d8f30c54477"
branch_labels = None
depends_on = None


def upgrade() -> None:
    """Upgrade database schema and/or data, creating a new revision."""
    # ### commands auto generated by Alembic - please adjust! ###
    bind = op.get_bind()
    session = sqlmodel.Session(bind=bind)

    avs = session.exec(
        sa.text(
            """
             SELECT artifact_id, version 
             FROM artifact_version
             """
        )
    ).all()

    print(avs)
    from collections import defaultdict
    mapping = defaultdict(set)

    for artifact_id, version in avs:
        if version in mapping[artifact_id]:
            artifact_name = session.exec(
                sa.text(
                    """
                    SELECT name
                    FROM artifact
                    WHERE id = :id_
                    """
                ), params={"id_": artifact_id}
            ).one()
            print(f"Found duplicate for artifact version {artifact_name} (version {version})")
            
        mapping[artifact_id].add(version)

    with op.batch_alter_table("artifact", schema=None) as batch_op:
        batch_op.create_unique_constraint("unique_artifact_name", ["name"])

    with op.batch_alter_table("artifact_version", schema=None) as batch_op:
        batch_op.create_unique_constraint(
            "unique_version_for_artifact_id", ["version", "artifact_id"]
        )

    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade database schema and/or data back to the previous revision."""
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("artifact_version", schema=None) as batch_op:
        batch_op.drop_constraint(
            "unique_version_for_artifact_id", type_="unique"
        )

    with op.batch_alter_table("artifact", schema=None) as batch_op:
        batch_op.drop_constraint("unique_artifact_name", type_="unique")

    # ### end Alembic commands ###
